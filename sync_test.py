from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import os
import glob
import random
import traceback
from datetime import datetime

def create_report(success_files, failed_files):
    """
    T·∫°o file report th·ªëng k√™ k·∫øt qu·∫£ x·ª≠ l√Ω files
    """
    try:
        # L·∫•y th·ªùi gian hi·ªán t·∫°i ƒë·ªÉ t·∫°o t√™n file report
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"report_{current_time}.txt"
        
        # T·∫°o n·ªôi dung report
        report_content = []
        report_content.append("=== REPORT K·∫æT QU·∫¢ X·ª¨ L√ù FILE ===")
        report_content.append(f"Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        report_content.append(f"T·ªïng s·ªë file x·ª≠ l√Ω: {len(success_files) + len(failed_files)}")
        report_content.append(f"S·ªë file th√†nh c√¥ng: {len(success_files)}")
        report_content.append(f"S·ªë file th·∫•t b·∫°i: {len(failed_files)}")
        report_content.append("")
        
        report_content.append("== SUCCESS ==")
        if success_files:
            for file in success_files:
                report_content.append(file)
        else:
            report_content.append("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng")
        report_content.append("")
        
        report_content.append("== FAIL ==")
        if failed_files:
            for file in failed_files:
                report_content.append(file)
        else:
            report_content.append("Kh√¥ng c√≥ file n√†o th·∫•t b·∫°i")
        
        # Ghi file report
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report_content))
        
        print(f"‚úÖ ƒê√£ t·∫°o file report: {report_filename}")
        print(f"üìä Th·ªëng k√™: {len(success_files)} th√†nh c√¥ng, {len(failed_files)} th·∫•t b·∫°i")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o report: {e}")

def get_vessel_names_from_csv_files(csv_directory):
    """
    L·∫•y danh s√°ch t√™n ph∆∞∆°ng ti·ªán t·ª´ c√°c file CSV
    T√™n ph∆∞∆°ng ti·ªán = c√°c k√Ω t·ª± ƒë·∫ßu t√™n file k·∫øt th√∫c b·∫±ng -TS
    """
    vessel_names = []
    
    try:
        # T√¨m t·∫•t c·∫£ file CSV trong th∆∞ m·ª•c
        csv_files = glob.glob(os.path.join(csv_directory, "*.csv"))
        
        for csv_file in csv_files:
            filename = os.path.basename(csv_file)
            print(f"ƒêang x·ª≠ l√Ω file: {filename}")
            
            # T√¨m ph·∫ßn t√™n k·∫øt th√∫c b·∫±ng -TS
            if "-TS" in filename:
                # L·∫•y ph·∫ßn t·ª´ ƒë·∫ßu ƒë·∫øn sau -TS (bao g·ªìm c·∫£ -TS)
                ts_index = filename.find("-TS")
                vessel_name = filename[:ts_index + 3]  # +3 ƒë·ªÉ l·∫•y c·∫£ "-TS"
                if vessel_name and vessel_name not in vessel_names:
                    vessel_names.append(vessel_name)
                    print(f"‚úÖ T√¨m th·∫•y t√™n ph∆∞∆°ng ti·ªán: {vessel_name}")
        
        print(f"T·ªïng c·ªông t√¨m th·∫•y {len(vessel_names)} ph∆∞∆°ng ti·ªán t·ª´ {len(csv_files)} file CSV")
        return vessel_names
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return []

def find_csv_file_for_vessel(csv_directory, vessel_name):
    """
    T√¨m file CSV t∆∞∆°ng ·ª©ng v·ªõi t√™n ph∆∞∆°ng ti·ªán
    """
    try:
        csv_files = glob.glob(os.path.join(csv_directory, "*.csv"))
        for csv_file in csv_files:
            if vessel_name in os.path.basename(csv_file):
                return csv_file
        return None
    except Exception as e:
        print(f"‚ùå L·ªói khi t√¨m file CSV cho {vessel_name}: {e}")
        return None

def wait_for_api_response(driver, target_url="sendFileCsvToTcts", timeout=30):
    """
    Ch·ªù v√† theo d√µi response t·ª´ API
    """
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            # L·∫•y network logs
            logs = driver.get_log('performance')
            for log in logs:
                message = log.get('message', '')
                if 'Network.responseReceived' in message:
                    try:
                        import json
                        log_data = json.loads(message)
                        if 'params' in log_data:
                            response_data = log_data['params']['response']
                            url = response_data.get('url', '')
                            
                            if target_url in url:
                                
                                # L·∫•y response body
                                request_id = log_data['params']['requestId']
                                try:
                                    response_body = driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': request_id})
                                    body_content = response_body.get('body', '')
                                    
                                    if body_content:
                                        response_json = json.loads(body_content)
                                        
                                        success = response_json.get('success', False)
                                        result_text = response_json.get('resultText', '')
                                        
                                        if success:
                                            return True
                                        else:
                                            return False
                                except Exception as body_error:
                                    print(f"Kh√¥ng th·ªÉ ƒë·ªçc response body: {body_error}")
                                    
                    except Exception as parse_error:
                        continue
            
            time.sleep(1)
            
        except Exception as e:
            time.sleep(1)
    
    print(f"‚ùå Timeout sau {timeout} gi√¢y, kh√¥ng nh·∫≠n ƒë∆∞·ª£c response")
    return False

def sync_test():
    """
    Script test cho t√≠nh nƒÉng ƒë·ªìng b·ªô tr√™n trang https://stramtest.innoway.vn
    """
    print("=== B·∫ÆT ƒê·∫¶U TEST T√çNH NƒÇNG ƒê·ªíNG B·ªò ===")
    
    # Kh·ªüi t·∫°o danh s√°ch ƒë·ªÉ tracking k·∫øt qu·∫£
    success_files = []
    failed_files = []
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a file CSV (folder DS trong c√πng th∆∞ m·ª•c v·ªõi script)
    script_dir = os.path.dirname(os.path.abspath(__file__))
    csv_directory = os.path.join(script_dir, "DS")
    
    print(f"ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c CSV: {csv_directory}")
    
    # Ki·ªÉm tra xem th∆∞ m·ª•c DS c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(csv_directory):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c DS t·∫°i: {csv_directory}")
        print("Vui l√≤ng t·∫°o th∆∞ m·ª•c 'DS' v√† ƒë·∫∑t c√°c file CSV v√†o ƒë√≥.")
        return
    
    # Thi·∫øt l·∫≠p Chrome driver
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--enable-logging")
    chrome_options.add_argument("--log-level=0")
    
    # T·∫°o driver Chrome
    driver = webdriver.Chrome(options=chrome_options)
    
    # B·∫≠t DevTools ƒë·ªÉ theo d√µi network requests
    driver.execute_cdp_cmd('Network.enable', {})
    
    try:
        # B∆∞·ªõc 1: Truy c·∫≠p trang web
        print("B∆∞·ªõc 1: ƒêang truy c·∫≠p trang web https://stramtest.innoway.vn...")
        driver.get("https://stramtest.innoway.vn")
        
        # B∆∞·ªõc 2: Ch·ªù cho ƒë·∫øn khi hi·ªÉn th·ªã n√∫t T·ªïng c·ª•c th·ªßy s·∫£n ·ªü menu bar b√™n tr√°i
        print("B∆∞·ªõc 2: Ch·ªù hi·ªÉn th·ªã n√∫t 'T·ªïng c·ª•c th·ªßy s·∫£n' ·ªü menu bar b√™n tr√°i...")
        wait = WebDriverWait(driver, 60)
        
        # Ch·ªù sidebar xu·∫•t hi·ªán tr∆∞·ªõc
        sidebar_element = wait.until(
            EC.presence_of_element_located((By.CLASS_NAME, "sidebar-wrapper"))
        )
        print("‚úÖ Sidebar ƒë√£ xu·∫•t hi·ªán")
        
        # Ch·ªù n√∫t "T·ªïng c·ª•c th·ªßy s·∫£n" xu·∫•t hi·ªán
        tong_cuc_thuy_san = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//p[contains(text(), 'T·ªïng c·ª•c th·ªßy s·∫£n')]"))
        )
        print("‚úÖ N√∫t 'T·ªïng c·ª•c th·ªßy s·∫£n' ƒë√£ hi·ªÉn th·ªã")
        
        # B∆∞·ªõc 3: Nh·∫•n v√†o T·ªïng c·ª•c th·ªßy s·∫£n
        print("B∆∞·ªõc 3: Nh·∫•n v√†o 'T·ªïng c·ª•c th·ªßy s·∫£n'...")
        tong_cuc_thuy_san.click()
        print("‚úÖ ƒê√£ click v√†o 'T·ªïng c·ª•c th·ªßy s·∫£n'")
        
        # Ch·ªù menu con m·ªü ra
        time.sleep(2)
        
        # B∆∞·ªõc 4: Nh·∫•n ch·ªçn G·ª≠i B√π Sang TCTS
        print("B∆∞·ªõc 4: Nh·∫•n ch·ªçn 'G·ª≠i B√π Sang TCTS'...")
        gui_bu_sang_tcts = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'G·ª≠i b√π sang TCTS')]"))
        )
        gui_bu_sang_tcts.click()
        print("‚úÖ ƒê√£ click v√†o 'G·ª≠i B√π Sang TCTS'")
        
        # Ch·ªù trang t·∫£i
        time.sleep(3)
        
        # B∆∞·ªõc 5: Nh·∫•n n√∫t G·ª¨I B√ô FILE
        print("B∆∞·ªõc 5: Nh·∫•n n√∫t 'G·ª¨I B√ô FILE'...")
        gui_bu_file_btn = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn.btn-success"))
        )
        gui_bu_file_btn.click()
        print("‚úÖ ƒê√£ click n√∫t 'G·ª¨I B√ô FILE'")
        
        # Ch·ªù form nh·∫≠p th√¥ng tin xu·∫•t hi·ªán
        time.sleep(3)
        
        # B∆∞·ªõc 6: Th·ª±c hi·ªán g·ª≠i l·∫ßn l∆∞·ª£t t·ª´ng ph∆∞∆°ng ti·ªán v·ªõi th√¥ng tin chi ti·∫øt
        print("B∆∞·ªõc 6: Th·ª±c hi·ªán g·ª≠i l·∫ßn l∆∞·ª£t t·ª´ng file CSV...")
        
        # L·∫•y danh s√°ch t·∫•t c·∫£ file CSV trong th∆∞ m·ª•c DS
        csv_files = glob.glob(os.path.join(csv_directory, "*.csv"))
        print(f"T√¨m th·∫•y {len(csv_files)} file CSV ƒë·ªÉ x·ª≠ l√Ω")
        
        # L·∫∑p qua t·ª´ng file CSV
        for i, csv_file_path in enumerate(csv_files[:5], 1):  # Gi·ªõi h·∫°n 5 file ƒë·∫ßu ti√™n ƒë·ªÉ test
            filename = os.path.basename(csv_file_path)
            print(f"\n--- X·ª≠ l√Ω file {i}: {filename} ---")
            
            try:
                # Split t√™n file b·ªüi d·∫•u "_", l·∫•y ph·∫ßn ƒë·∫ßu ti√™n l√† t√™n thi·∫øt b·ªã
                device_name = filename.split("_")[0]
                
                # 1. ƒêi·ªÅn t√™n thi·∫øt b·ªã v√†o input deviceNameList
                try:
                    device_input = wait.until(
                        EC.element_to_be_clickable((By.ID, "deviceNameList"))
                    )
                    device_input.clear()
                    device_input.send_keys(device_name)
                except Exception as e:
                    print(f"‚ùå L·ªói khi ƒëi·ªÅn t√™n thi·∫øt b·ªã: {e}")
                    failed_files.append(filename)
                    continue
                
                time.sleep(1)
                
                # 2. D√πng JavaScript ƒëi·ªÅn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
                try:
                    # ƒêi·ªÅn ng√†y b·∫Øt ƒë·∫ßu: 19/08/2025
                    driver.execute_script("""
                        document.getElementById('dateFrom').value = '19/08/2025';
                        document.getElementById('dateFrom').dispatchEvent(new Event('change'));
                    """)
                    
                    # ƒêi·ªÅn ng√†y k·∫øt th√∫c: 20/08/2025  
                    driver.execute_script("""
                        document.getElementById('dateTo').value = '20/08/2025';
                        document.getElementById('dateTo').dispatchEvent(new Event('change'));
                    """)
                except Exception as e:
                    print(f"‚ùå L·ªói khi ƒëi·ªÅn ng√†y b·∫±ng JavaScript: {e}")
                    failed_files.append(filename)
                    continue
                
                time.sleep(1)
                
                # 3. ƒêi·ªÅn ID ph·∫£n h·ªìi
                try:
                    id_response_input = wait.until(
                        EC.element_to_be_clickable((By.ID, "idRespon"))
                    )
                    id_response_input.clear()
                    id_response_input.send_keys("test")
                except Exception as e:
                    print(f"‚ùå L·ªói khi ƒëi·ªÅn ID ph·∫£n h·ªìi: {e}")
                    failed_files.append(filename)
                    continue
                
                time.sleep(1)
                
                # 4. Load file v√†o input file
                print("ƒêang load file CSV...")
                try:
                    file_input = wait.until(
                        EC.presence_of_element_located((By.ID, "files"))
                    )
                    file_input.send_keys(csv_file_path)
                except Exception as e:
                    print(f"‚ùå L·ªói khi load file: {e}")
                    failed_files.append(filename)
                    continue
                
                time.sleep(2)
                
                # 5. Nh·∫•n n√∫t "G·ª≠i file"
                print("ƒêang nh·∫•n n√∫t 'G·ª≠i file'...")
                try:
                    send_button = wait.until(
                        EC.element_to_be_clickable((By.XPATH, "//button[@onclick='sendFileCsvToTcts()']"))
                    )
                    
                    # Scroll ƒë·∫øn n√∫t n·∫øu c·∫ßn
                    driver.execute_script("arguments[0].scrollIntoView();", send_button)
                    time.sleep(0.5)
                    
                    send_button.click()
                    
                    # Ch·ªù v√† ki·ªÉm tra response t·ª´ API
                    response_success = wait_for_api_response(driver, "sendFileCsvToTcts", 60)                    
                   
                    # Quy·∫øt ƒë·ªãnh c√≥ ti·∫øp t·ª•c kh√¥ng
                    if response_success:
                        print("‚úÖ X·ª≠ l√Ω file th√†nh c√¥ng, s·∫Ω ti·∫øp t·ª•c v·ªõi file ti·∫øp theo")
                        success_files.append(filename)
                    else:
                        print("‚ö†Ô∏è X·ª≠ l√Ω file kh√¥ng th√†nh c√¥ng, nh∆∞ng s·∫Ω ti·∫øp t·ª•c v·ªõi file ti·∫øp theo")
                        failed_files.append(filename)
                        
                except Exception as e:
                    print(f"‚ùå L·ªói khi nh·∫•n n√∫t 'G·ª≠i file': {e}")
                    failed_files.append(filename)
                    continue
                
                print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω file: {filename}")
                
                # Ch·ªù tr∆∞·ªõc khi x·ª≠ l√Ω file ti·∫øp theo
                if i < len(csv_files[:5]):
                    print("Ch·ªù 3 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω file ti·∫øp theo...")
                    time.sleep(3)
                    
                    # Reset form ƒë·ªÉ chu·∫©n b·ªã cho file ti·∫øp theo (n·∫øu c·∫ßn)
                    try:
                        # Clear c√°c input field
                        driver.execute_script("""
                            document.getElementById('deviceNameList').value = '';
                            document.getElementById('dateFrom').value = '';
                            document.getElementById('dateTo').value = '';
                            document.getElementById('idRespon').value = '';
                            document.getElementById('files').value = '';
                        """)
                        time.sleep(1)
                    except:
                        pass
                    
            except Exception as file_error:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω file {filename}: {file_error}")
                failed_files.append(filename)
                continue
        
        # Ch·ªù ƒë·ªÉ quan s√°t k·∫øt qu·∫£
        print(f"\nüéâ HO√ÄN TH√ÄNH X·ª¨ L√ù {len(csv_files[:5])} FILE CSV!")
        print("Ch·ªù 15 gi√¢y ƒë·ªÉ quan s√°t k·∫øt qu·∫£...")
        time.sleep(15)
        
        print("=== TEST T√çNH NƒÇNG ƒê·ªíNG B·ªò HO√ÄN TH√ÄNH ===")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh test: {e}")
        print("C√≥ th·ªÉ c√°c selector ƒë√£ thay ƒë·ªïi ho·∫∑c trang web ch∆∞a t·∫£i ƒë·∫ßy ƒë·ªß")
    
    finally:
        # T·∫°o report k·∫øt qu·∫£
        try:
            create_report(success_files, failed_files)
        except:
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o file report")
            
        # Gi·ªØ tr√¨nh duy·ªát m·ªü th√™m 60 gi√¢y ƒë·ªÉ ki·ªÉm tra th·ªß c√¥ng n·∫øu c·∫ßn
        print("Gi·ªØ tr√¨nh duy·ªát m·ªü th√™m 60 gi√¢y ƒë·ªÉ ki·ªÉm tra...")
        time.sleep(60)
        print("ƒê√≥ng tr√¨nh duy·ªát...")
        driver.quit()

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y test
    """
    try:
        sync_test()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")

if __name__ == "__main__":
    main()
