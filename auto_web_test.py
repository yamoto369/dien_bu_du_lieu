from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time
import os
import glob
import shutil

def clear_tmp_directory(tmp_dir):
    """
    X√≥a t·∫•t c·∫£ file trong th∆∞ m·ª•c TMP
    """
    try:
        files = glob.glob(os.path.join(tmp_dir, "*"))
        if files:
            for file in files:
                os.remove(file)
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói khi x√≥a file trong TMP: {e}")

def check_and_move_file_from_tmp(tmp_dir, final_dir, timeout=10):
    """
    Ki·ªÉm tra c√≥ file n√†o trong th∆∞ m·ª•c TMP v√† move sang th∆∞ m·ª•c downloads ch√≠nh
    Returns: (success, filename) - success: True/False, filename: t√™n file ƒë∆∞·ª£c move ho·∫∑c None
    """
    for i in range(timeout):
        time.sleep(1)
        files = glob.glob(os.path.join(tmp_dir, "*"))
        
        if files:
            # C√≥ file, l·∫•y file ƒë·∫ßu ti√™n
            file_path = files[0]
            filename = os.path.basename(file_path)
            final_path = os.path.join(final_dir, filename)
            
            try:
                # Move file t·ª´ TMP sang th∆∞ m·ª•c ch√≠nh
                shutil.move(file_path, final_path)
                return True, filename
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi move file {filename}: {e}")
                return False, filename
        
        print(f"Ki·ªÉm tra l·∫ßn {i+1}/{timeout}...")
    
    return False, None

def main():
    # Danh s√°ch th·ªëng k√™ IMEI t·∫£i th·∫•t b·∫°i v√† th√†nh c√¥ng
    failed_imei_list = []
    success_files = []
    
    # ƒê·ªçc danh s√°ch IMEI t·ª´ file
    imei_file_path = os.path.join(os.path.dirname(__file__), "imeilist.txt")
    try:
        with open(imei_file_path, 'r', encoding='utf-8') as f:
            imei_list = [line.strip() for line in f.readlines() if line.strip()]
        print(f"ƒê√£ ƒë·ªçc {len(imei_list)} IMEI t·ª´ file imeilist.txt")
    except FileNotFoundError:
        print("Kh√¥ng t√¨m th·∫•y file imeilist.txt!")
        return
    except Exception as e:
        print(f"L·ªói ƒë·ªçc file imeilist.txt: {e}")
        return

    # Thi·∫øt l·∫≠p Chrome driver
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    
    # Thi·∫øt l·∫≠p th∆∞ m·ª•c download t·ª± ƒë·ªông
    download_dir = os.path.join(os.getcwd(), "downloads")
    tmp_dir = os.path.join(download_dir, "TMP")
    
    # T·∫°o th∆∞ m·ª•c downloads v√† TMP n·∫øu ch∆∞a t·ªìn t·∫°i
    if not os.path.exists(download_dir):
        os.makedirs(download_dir)
    if not os.path.exists(tmp_dir):
        os.makedirs(tmp_dir)
    
    print(f"Th∆∞ m·ª•c t·∫£i ch√≠nh: {download_dir}")
    print(f"Th∆∞ m·ª•c t·∫£i t·∫°m: {tmp_dir}")
    
    prefs = {
        "download.default_directory": tmp_dir,  # T·∫£i v·ªÅ th∆∞ m·ª•c TMP tr∆∞·ªõc
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    chrome_options.add_experimental_option("prefs", prefs)
    
    # T·∫°o driver Chrome (s·ª≠ d·ª•ng driver m·∫∑c ƒë·ªãnh trong system PATH)
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("ƒêang truy c·∫≠p trang web...")
        driver.get("https://stram.viettel.io/")
        
        print("Ch·ªù element sidebar-wrapper xu·∫•t hi·ªán...")
        # Ch·ªù ƒë·∫øn khi element xu·∫•t hi·ªán (t·ªëi ƒëa 60 gi√¢y)
        wait = WebDriverWait(driver, 60)
        
        # Ch·ªù element sidebar-wrapper xu·∫•t hi·ªán
        sidebar_element = wait.until(
            EC.presence_of_element_located((By.XPATH, "//div[@class='sidebar-wrapper ps-container ps-theme-default ps-active-y']"))
        )
        time.sleep(3)
        
        tong_cuc_thuy_san = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//p[text()='T·ªïng c·ª•c th·ªßy s·∫£n']"))
        )
        tong_cuc_thuy_san.click()
               
        element = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//span[@class='sidebar-normal' and text()='G·ª≠i b√π sang TCTS']"))
        )
        element.click()
        
        date_from = wait.until(
            EC.presence_of_element_located((By.ID, "date_timepicker_start"))
        )
        driver.execute_script("arguments[0].value = '19/08/2025 18:00';", date_from)
        
        date_to = driver.find_element(By.ID, "date_timepicker_end")
        driver.execute_script("arguments[0].value = '20/08/2025 03:00';", date_to)
        
        # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p x·ª≠ l√Ω t·ª´ng IMEI
        for i, imei in enumerate(imei_list, 1):
            print(f"\n=== X·ª≠ l√Ω IMEI {i}/{len(imei_list)}: {imei} ===")
            imei_input = driver.find_element(By.ID, "imeiDevice")
            imei_input.clear()
            imei_input.send_keys(imei)

            print("Click n√∫t T√¨m ki·∫øm...")
            search_btn = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[@class='btn btn-primary btn-fill' and @onclick='searchHistoryDevice()']"))
            )
            search_btn.click()
            
            print("Ch·ªù th√™m 5 gi√¢y tr∆∞·ªõc khi click n√∫t t·∫£i file...")
            time.sleep(5)
            
            # X√≥a h·∫øt file trong th∆∞ m·ª•c TMP tr∆∞·ªõc khi t·∫£i
            clear_tmp_directory(tmp_dir)
            
            print("Click n√∫t t·∫£i CSV...")
            csv_btn = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//button[@class='btn btn-danger' and @onclick='createBanTinBuCsv()']"))
            )
            csv_btn.click()
            
            # Ki·ªÉm tra v√† move file t·ª´ TMP
            success, filename = check_and_move_file_from_tmp(tmp_dir, download_dir, 10)
            
            if success:
                print(f"‚úÖ IMEI {imei} - T·∫£i v√† move file th√†nh c√¥ng: {filename}")
                success_files.append({"imei": imei, "filename": filename})
            else:
                print(f"‚ùå IMEI {imei} - T·∫£i file th·∫•t b·∫°i")
                failed_imei_list.append(imei)
            
            print(f"Ho√†n th√†nh x·ª≠ l√Ω IMEI {imei}")

        print(f"\n=== ƒê√£ ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ {len(imei_list)} IMEI ===")
        
        # B√°o c√°o th·ªëng k√™ chi ti·∫øt
        print(f"\nüìä === B√ÅO C√ÅO TH·ªêNG K√ä ===")
        print(f"T·ªïng s·ªë IMEI x·ª≠ l√Ω: {len(imei_list)}")
        print(f"S·ªë IMEI t·∫£i th√†nh c√¥ng: {len(success_files)}")
        print(f"S·ªë IMEI t·∫£i th·∫•t b·∫°i: {len(failed_imei_list)}")
        
        # Hi·ªÉn th·ªã danh s√°ch file th√†nh c√¥ng
        if success_files:
            print(f"\n‚úÖ Danh s√°ch IMEI t·∫£i th√†nh c√¥ng:")
            for idx, item in enumerate(success_files, 1):
                print(f"  {idx}. IMEI: {item['imei']} ‚Üí File: {item['filename']}")
        
        # Hi·ªÉn th·ªã danh s√°ch IMEI th·∫•t b·∫°i
        if failed_imei_list:
            print(f"\n‚ùå Danh s√°ch IMEI t·∫£i th·∫•t b·∫°i:")
            for idx, failed_imei in enumerate(failed_imei_list, 1):
                print(f"  {idx}. {failed_imei}")
                
            # Ghi danh s√°ch IMEI th·∫•t b·∫°i v√†o file
            failed_file_path = os.path.join(os.path.dirname(__file__), "failed_imei.txt")
            try:
                with open(failed_file_path, 'w', encoding='utf-8') as f:
                    for failed_imei in failed_imei_list:
                        f.write(f"{failed_imei}\n")
                print(f"\nüíæ ƒê√£ l∆∞u danh s√°ch IMEI th·∫•t b·∫°i v√†o file: {failed_file_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi ghi file IMEI th·∫•t b·∫°i: {e}")
        else:
            print(f"\nüéâ T·∫•t c·∫£ IMEI ƒë·ªÅu t·∫£i th√†nh c√¥ng!")
        
        # L√†m s·∫°ch th∆∞ m·ª•c TMP (x√≥a c√°c file c√≤n l·∫°i n·∫øu c√≥)
        try:
            remaining_files = glob.glob(os.path.join(tmp_dir, "*"))
            if remaining_files:
                print(f"\nüßπ ƒêang d·ªçn d·∫πp {len(remaining_files)} file c√≤n l·∫°i trong th∆∞ m·ª•c TMP...")
                for file in remaining_files:
                    os.remove(file)
                print("‚úÖ ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c TMP")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi d·ªçn d·∫πp th∆∞ m·ª•c TMP: {e}")

        # Gi·ªØ tr√¨nh duy·ªát m·ªü 60 gi√¢y ƒë·ªÉ quan s√°t k·∫øt qu·∫£
        time.sleep(60)
        
    except Exception as e:
        print(f"L·ªói: {e}")
    finally:
        print("ƒê√≥ng tr√¨nh duy·ªát...")
        driver.quit()

if __name__ == "__main__":
    main()
